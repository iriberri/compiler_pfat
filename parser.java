
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Apr 20 22:20:56 CEST 2014
//----------------------------------------------------

package Parser;

import Errors.LexerException;
import java_cup.runtime.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Sun Apr 20 22:20:56 CEST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\003\007\000\002\003" +
    "\005\000\002\012\004\000\002\012\005\000\002\013\004" +
    "\000\002\004\003\000\002\004\005\000\002\006\006\000" +
    "\002\011\005\000\002\011\003\000\002\005\004\000\002" +
    "\005\005\000\002\007\005\000\002\007\006\000\002\007" +
    "\007\000\002\007\007\000\002\010\003\000\002\010\005" +
    "\000\002\010\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\010\006\000\002\010\006\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\006\000\002\010\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\020\004\001\002\000\004\051\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\010\010\021\011\001\002\000\012\016\031\022" +
    "\030\024\025\051\027\001\002\000\004\052\015\001\002" +
    "\000\004\002\uffff\001\002\000\004\010\010\001\002\000" +
    "\004\005\022\001\002\000\004\051\016\001\002\000\006" +
    "\004\020\005\ufffb\001\002\000\004\005\ufffc\001\002\000" +
    "\004\051\016\001\002\000\004\005\ufffa\001\002\000\006" +
    "\010\ufffe\052\015\001\002\000\004\010\ufffd\001\002\000" +
    "\004\002\000\001\002\000\004\006\140\001\002\000\004" +
    "\005\136\001\002\000\004\012\134\001\002\000\032\006" +
    "\045\015\051\025\035\032\040\033\044\035\037\043\043" +
    "\044\047\046\046\047\042\050\050\051\036\001\002\000" +
    "\032\006\045\015\051\025\035\032\040\033\044\035\037" +
    "\043\043\044\047\046\046\047\042\050\050\051\036\001" +
    "\002\000\004\011\033\001\002\000\004\005\034\001\002" +
    "\000\004\002\ufff9\001\002\000\034\006\045\015\051\025" +
    "\035\026\124\032\040\033\044\035\037\043\043\044\047" +
    "\046\046\047\042\050\050\051\036\001\002\000\046\004" +
    "\ufff0\005\ufff0\007\ufff0\013\ufff0\014\ufff0\017\ufff0\023\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\001\002\000\032" +
    "\006\045\015\051\025\035\032\040\033\044\035\037\043" +
    "\043\044\047\046\046\047\042\050\050\051\036\001\002" +
    "\000\004\006\116\001\002\000\034\013\053\014\066\017" +
    "\113\027\056\030\057\031\063\034\060\035\054\036\065" +
    "\037\061\040\062\041\055\042\064\001\002\000\046\004" +
    "\uffe2\005\uffe2\007\uffe2\013\uffe2\014\uffe2\017\uffe2\023\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\001\002\000\004" +
    "\006\110\001\002\000\004\006\105\001\002\000\032\006" +
    "\045\015\051\025\035\032\040\033\044\035\037\043\043" +
    "\044\047\046\046\047\042\050\050\051\036\001\002\000" +
    "\046\004\uffee\005\uffee\007\uffee\013\uffee\014\uffee\017\uffee" +
    "\023\uffee\026\uffee\027\uffee\030\uffee\031\uffee\034\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\001\002" +
    "\000\046\004\uffd8\005\uffd8\007\uffd8\013\uffd8\014\uffd8\017" +
    "\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\046\004\uffe4\005\uffe4\007\uffe4\013\uffe4\014\uffe4" +
    "\017\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\001\002\000\032\006\045\015\051\025\035\032\040\033" +
    "\044\035\037\043\043\044\047\046\046\047\042\050\050" +
    "\051\036\001\002\000\046\004\uffdf\005\uffdf\007\uffdf\013" +
    "\uffdf\014\uffdf\017\uffdf\023\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\034\060\035\054\036\065\037\061\040\062\041" +
    "\055\042\064\001\002\000\032\006\045\015\051\025\035" +
    "\032\040\033\044\035\037\043\043\044\047\046\046\047" +
    "\042\050\050\051\036\001\002\000\032\006\045\015\051" +
    "\025\035\032\040\033\044\035\037\043\043\044\047\046" +
    "\046\047\042\050\050\051\036\001\002\000\032\006\045" +
    "\015\051\025\035\032\040\033\044\035\037\043\043\044" +
    "\047\046\046\047\042\050\050\051\036\001\002\000\032" +
    "\006\045\015\051\025\035\032\040\033\044\035\037\043" +
    "\043\044\047\046\046\047\042\050\050\051\036\001\002" +
    "\000\032\006\045\015\051\025\035\032\040\033\044\035" +
    "\037\043\043\044\047\046\046\047\042\050\050\051\036" +
    "\001\002\000\032\006\045\015\051\025\035\032\040\033" +
    "\044\035\037\043\043\044\047\046\046\047\042\050\050" +
    "\051\036\001\002\000\032\006\045\015\051\025\035\032" +
    "\040\033\044\035\037\043\043\044\047\046\046\047\042" +
    "\050\050\051\036\001\002\000\032\006\045\015\051\025" +
    "\035\032\040\033\044\035\037\043\043\044\047\046\046" +
    "\047\042\050\050\051\036\001\002\000\032\006\045\015" +
    "\051\025\035\032\040\033\044\035\037\043\043\044\047" +
    "\046\046\047\042\050\050\051\036\001\002\000\032\006" +
    "\045\015\051\025\035\032\040\033\044\035\037\043\043" +
    "\044\047\046\046\047\042\050\050\051\036\001\002\000" +
    "\032\006\045\015\051\025\035\032\040\033\044\035\037" +
    "\043\043\044\047\046\046\047\042\050\050\051\036\001" +
    "\002\000\032\006\045\015\051\025\035\032\040\033\044" +
    "\035\037\043\043\044\047\046\046\047\042\050\050\051" +
    "\036\001\002\000\046\004\uffe0\005\uffe0\007\uffe0\013\053" +
    "\014\uffe0\017\uffe0\023\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\034\060\035\054\036\065\037\061\040\062\041\055" +
    "\042\064\001\002\000\046\004\uffeb\005\uffeb\007\uffeb\013" +
    "\uffeb\014\uffeb\017\uffeb\023\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\001\002\000\046\004\uffdc\005\uffdc\007\uffdc" +
    "\013\uffdc\014\uffdc\017\uffdc\023\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\034\060\035\054\036\065\037\061\040\062" +
    "\041\055\042\uffdc\001\002\000\046\004\uffe5\005\uffe5\007" +
    "\uffe5\013\053\014\066\017\uffe5\023\uffe5\026\uffe5\027\056" +
    "\030\uffe5\031\uffe5\034\060\035\054\036\065\037\061\040" +
    "\062\041\055\042\064\001\002\000\046\004\uffde\005\uffde" +
    "\007\uffde\013\uffde\014\uffde\017\uffde\023\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\034\060\035\054\036\065\037\061" +
    "\040\uffde\041\uffde\042\uffde\001\002\000\046\004\uffea\005" +
    "\uffea\007\uffea\013\uffea\014\uffea\017\uffea\023\uffea\026\uffea" +
    "\027\uffea\030\uffea\031\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\001\002\000\046\004\uffed" +
    "\005\uffed\007\uffed\013\uffed\014\uffed\017\uffed\023\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\034\uffed\035\uffed\036\065" +
    "\037\061\040\uffed\041\uffed\042\uffed\001\002\000\046\004" +
    "\uffe6\005\uffe6\007\uffe6\013\053\014\066\017\uffe6\023\uffe6" +
    "\026\uffe6\027\056\030\uffe6\031\063\034\060\035\054\036" +
    "\065\037\061\040\062\041\055\042\064\001\002\000\046" +
    "\004\uffda\005\uffda\007\uffda\013\053\014\066\017\uffda\023" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\034\060\035\054" +
    "\036\065\037\061\040\062\041\055\042\064\001\002\000" +
    "\046\004\uffdd\005\uffdd\007\uffdd\013\uffdd\014\uffdd\017\uffdd" +
    "\023\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\034\060\035" +
    "\054\036\065\037\061\040\uffdd\041\uffdd\042\uffdd\001\002" +
    "\000\046\004\uffec\005\uffec\007\uffec\013\uffec\014\uffec\017" +
    "\uffec\023\uffec\026\uffec\027\uffec\030\uffec\031\uffec\034\uffec" +
    "\035\uffec\036\065\037\061\040\uffec\041\uffec\042\uffec\001" +
    "\002\000\046\004\uffe1\005\uffe1\007\uffe1\013\uffe1\014\uffe1" +
    "\017\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\034" +
    "\060\035\054\036\065\037\061\040\062\041\055\042\064" +
    "\001\002\000\034\007\104\013\053\014\066\027\056\030" +
    "\057\031\063\034\060\035\054\036\065\037\061\040\062" +
    "\041\055\042\064\001\002\000\046\004\uffef\005\uffef\007" +
    "\uffef\013\uffef\014\uffef\017\uffef\023\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\001\002\000\032\006\045\015\051" +
    "\025\035\032\040\033\044\035\037\043\043\044\047\046" +
    "\046\047\042\050\050\051\036\001\002\000\034\007\107" +
    "\013\053\014\066\027\056\030\057\031\063\034\060\035" +
    "\054\036\065\037\061\040\062\041\055\042\064\001\002" +
    "\000\046\004\uffe7\005\uffe7\007\uffe7\013\uffe7\014\uffe7\017" +
    "\uffe7\023\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001" +
    "\002\000\032\006\045\015\051\025\035\032\040\033\044" +
    "\035\037\043\043\044\047\046\046\047\042\050\050\051" +
    "\036\001\002\000\034\007\112\013\053\014\066\027\056" +
    "\030\057\031\063\034\060\035\054\036\065\037\061\040" +
    "\062\041\055\042\064\001\002\000\046\004\uffe3\005\uffe3" +
    "\007\uffe3\013\uffe3\014\uffe3\017\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\001\002\000\012\016\031\022" +
    "\030\024\025\051\027\001\002\000\004\011\115\001\002" +
    "\000\004\005\ufff2\001\002\000\032\006\045\015\051\025" +
    "\035\032\040\033\044\035\037\043\043\044\047\046\046" +
    "\047\042\050\050\051\036\001\002\000\034\007\120\013" +
    "\053\014\066\027\056\030\057\031\063\034\060\035\054" +
    "\036\065\037\061\040\062\041\055\042\064\001\002\000" +
    "\046\004\uffe8\005\uffe8\007\uffe8\013\uffe8\014\uffe8\017\uffe8" +
    "\023\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002" +
    "\000\046\004\uffe9\005\uffe9\007\uffe9\013\uffe9\014\uffe9\017" +
    "\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001" +
    "\002\000\036\004\126\013\053\014\066\026\ufff7\027\056" +
    "\030\057\031\063\034\060\035\054\036\065\037\061\040" +
    "\062\041\055\042\064\001\002\000\004\026\125\001\002" +
    "\000\046\004\uffd9\005\uffd9\007\uffd9\013\uffd9\014\uffd9\017" +
    "\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\001" +
    "\002\000\046\004\uffdb\005\uffdb\007\uffdb\013\uffdb\014\uffdb" +
    "\017\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\001\002\000\032\006\045\015\051\025\035\032\040\033" +
    "\044\035\037\043\043\044\047\046\046\047\042\050\050" +
    "\051\036\001\002\000\004\026\ufff8\001\002\000\034\013" +
    "\053\014\066\023\131\027\056\030\057\031\063\034\060" +
    "\035\054\036\065\037\061\040\062\041\055\042\064\001" +
    "\002\000\012\016\031\022\030\024\025\051\027\001\002" +
    "\000\004\011\133\001\002\000\004\005\ufff1\001\002\000" +
    "\032\006\045\015\051\025\035\032\040\033\044\035\037" +
    "\043\043\044\047\046\046\047\042\050\050\051\036\001" +
    "\002\000\034\005\ufff4\013\053\014\066\027\056\030\057" +
    "\031\063\034\060\035\054\036\065\037\061\040\062\041" +
    "\055\042\064\001\002\000\014\011\ufff6\016\031\022\030" +
    "\024\025\051\027\001\002\000\004\011\ufff5\001\002\000" +
    "\032\006\045\015\051\025\035\032\040\033\044\035\037" +
    "\043\043\044\047\046\046\047\042\050\050\051\036\001" +
    "\002\000\034\007\142\013\053\014\066\027\056\030\057" +
    "\031\063\034\060\035\054\036\065\037\061\040\062\041" +
    "\055\042\064\001\002\000\004\005\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\011\001\001" +
    "\000\006\005\031\007\025\001\001\000\006\012\012\013" +
    "\013\001\001\000\002\001\001\000\004\006\023\001\001" +
    "\000\002\001\001\000\004\004\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\020\001\001\000\002" +
    "\001\001\000\006\012\022\013\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\127\001\001\000\004\010" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\121\011\122\001\001\000\002\001" +
    "\001\000\004\010\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\051\001\001\000" +
    "\002\001\001\000\004\010\101\001\001\000\004\010\100" +
    "\001\001\000\004\010\077\001\001\000\004\010\076\001" +
    "\001\000\004\010\075\001\001\000\004\010\074\001\001" +
    "\000\004\010\073\001\001\000\004\010\072\001\001\000" +
    "\004\010\071\001\001\000\004\010\070\001\001\000\004" +
    "\010\067\001\001\000\004\010\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\113\007\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\121\011\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\131\007\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\134\001\001" +
    "\000\002\001\001\000\006\005\136\007\025\001\001\000" +
    "\002\001\001\000\004\010\140\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s) {
  report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
  java.lang.Exception {
  report_fatal_error("", null);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= EMPTYSET 
            {
              Exp RESULT = null;
		RESULT=new EmptySet();
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= BRAC KET 
            {
              Exp RESULT = null;
		RESULT=new EmptySet();
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= Exp IN Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new In(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= BRAC LExp KET 
            {
              Exp RESULT = null;
		int le1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int le1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LExp le1 = (LExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new CIntset(le1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp IGUAL Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Igual(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= Exp MENOR Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Menor(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= Exp MAYOR Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Mayor(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= NOT Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Not(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= Exp OR Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Or(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= Exp AND Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new And(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= CLOG 
            {
              Exp RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new CLog(b1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= INT2STR PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Int2str(e);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= CSTR 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new CStr(s);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp INTERSEC Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Interseccion(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp UNION Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Union(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= LOWEST_ELEM PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new LowestElem(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= CARD PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Card(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= MENOS Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Opuesto(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Division(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= Exp MUL Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Mult(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Menos(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Mas(e1, e2);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= CINT 
            {
              Exp RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new CInt(i1);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp ::= IDENT 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Variable(s);
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= WHILE Exp DO StatementList END 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Bucle(e1, sl2);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= IF Exp THEN StatementList END 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl2 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Cond(e1, sl2);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= PRINT PAREN Exp TESIS 
            {
              Statement RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Print(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IDENT ASIG Exp 
            {
              Statement RESULT = null;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Asign(i3, e1);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement PC StatementList 
            {
              StatementList RESULT = null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StatementList sl1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new StatementList(s2, sl1);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*StatementList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= Statement PC 
            {
              StatementList RESULT = null;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new StatementList(s2);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*StatementList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LExp ::= Exp 
            {
              LExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LExp(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*LExp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LExp ::= Exp COMA LExp 
            {
              LExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int le1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int le1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExp le1 = (LExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LExp(e1, le1);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*LExp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Body ::= BEGIN StatementList END PC 
            {
              StatementList RESULT = null;
		int ls1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ls1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList ls1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new StatementList(ls1);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IdentList ::= IDENT COMA IdentList 
            {
              IdentList RESULT = null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int il3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int il3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IdentList il3 = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new IdentList(i2,il3);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*IdentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IdentList ::= IDENT 
            {
              IdentList RESULT = null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new IdentList(i2);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*IdentList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= TYPE IdentList 
            {
              Decl RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int il1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int il1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IdentList il1 = (IdentList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Decl(t1.intValue(), il1);
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecl ::= Decl PC LDecl 
            {
              LDecl RESULT = null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl d2 = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ld2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ld2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LDecl ld2 = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LDecl(d2, ld2);
              CUP$parser$result = new java_cup.runtime.Symbol(8/*LDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDecl ::= Decl PC 
            {
              LDecl RESULT = null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d2 = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new LDecl(d2);
              CUP$parser$result = new java_cup.runtime.Symbol(8/*LDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= PROG IDENT Body 
            {
              S RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StatementList b1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new S(i1, b1);
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROG IDENT DECL LDecl Body 
            {
              S RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ld1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ld1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LDecl ld1 = (LDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StatementList b1 = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new S(i1,ld1, b1);
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		S start_val = (S)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

